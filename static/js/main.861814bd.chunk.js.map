{"version":3,"sources":["store/actions/fetchUsers.ts","components/Fetch.tsx","components/Hooks.tsx","pages/Home.tsx","pages/About.tsx","pages/User.tsx","components/Routing.tsx","components/LinksRouter.tsx","App.tsx","serviceWorker.ts","store/reducers/rootReducer.ts","store/reducers/usersReducer.ts","store/store.ts","index.tsx"],"names":["fetchUsers","dispatch","fetch","then","res","json","type","users","data","Fetch","useSelector","state","useDispatch","onClick","length","map","user","key","id","first_name","email","Hooks","counter","root","Home","About","location","useLocation","history","useHistory","pathname","from","goBack","User","match","useParams","firstname","lastname","Routing","className","exact","path","component","LinksRouter","to","App","Boolean","window","hostname","initalState","allReducers","combineReducers","action","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.861814bd.chunk.js","sourcesContent":["export const FETCH_USERS = \"FETCH_USERS\";\r\n\r\nconst fetchUsers = (dispatch: any) => {\r\n    fetch('https://reqres.in/api/users')\r\n        .then(res => res.json())\r\n        .then(res => dispatch({ type: FETCH_USERS, users: res.data }))\r\n};\r\nexport default fetchUsers;","import * as React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport fetchUsers from '../store/actions/fetchUsers';\r\n\r\nexport function Fetch() {\r\n\r\n\r\n    const { users }: any = useSelector((state: any) => state.users)\r\n    const dispatch = useDispatch();\r\n\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div>\r\n                <div>\r\n                    <h3>Example of REDUX and hooks using FETCH</h3>\r\n                    <button onClick={() => fetchUsers(dispatch)}>FETCH USERS</button>\r\n                </div>\r\n                <div>\r\n                    {users.length === 0 ?\r\n                        <p>THERE ARE NO USERS</p> :\r\n                        users.map((user: any) =>\r\n                            <p key={user.id}>{user.first_name} - {user.email}</p>\r\n                        )}\r\n                </div>\r\n            </div>\r\n        </React.Fragment>\r\n    )\r\n}","import * as React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nexport function Hooks() {\r\n\r\n\r\n    const { counter }: any = useSelector((state: any) => state.root)\r\n    const dispatch = useDispatch();\r\n\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div>\r\n                <div>\r\n                    <h3>Basic Example of REDUX USING HOOKS</h3>\r\n                </div>\r\n                <div>\r\n                    <h4>Counter: {counter}</h4>\r\n                    <div><button onClick={() => dispatch({ type: \"INCREMENT\" })}>INCREMENT</button></div>\r\n                    <div><button onClick={() => dispatch({ type: \"DECREMENT\" })}>DECREMENT</button></div>\r\n                </div>\r\n            </div>\r\n        </React.Fragment>\r\n    )\r\n}","import * as React from 'react';\r\n\r\nexport function Home() {\r\n    return (\r\n        <div>Home</div>\r\n    )\r\n}","import * as React from 'react';\r\nimport { useLocation, useHistory } from 'react-router-dom';\r\n\r\n\r\n\r\nexport function About() {\r\n    const location: any = useLocation()\r\n    const history = useHistory()\r\n\r\n    const goBackHandle = () => {\r\n        history.goBack()\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div>About</div>\r\n            <div>Location = {location.pathname}</div>\r\n            <div>From = {location.state.from}</div>\r\n            <button onClick={goBackHandle}> Go Back  </button>\r\n\r\n        </React.Fragment>\r\n    )\r\n}","import * as React from 'react';\r\nimport { useParams } from 'react-router-dom';\r\n\r\n\r\nexport function User({ match }: any) {\r\n    const { firstname, lastname } = useParams()\r\n    return (\r\n        <React.Fragment>\r\n            <div>\r\n                <div><b>User :</b> {firstname}  {lastname} </div>\r\n            </div>\r\n        </React.Fragment>\r\n    )\r\n}","import * as React from 'react';\r\nimport { Home } from '../pages/Home';\r\nimport { About } from '../pages/About';\r\nimport { User } from '../pages/User';\r\nimport { Route, Switch } from 'react-router-dom';\r\n\r\nexport function Routing() {\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"border\">\r\n                <Switch>\r\n                    <Route exact path=\"/\" component={Home} />\r\n                    <Route exact path=\"/about\" component={About} />\r\n                    <Route exact path=\"/user/:firstname/:lastname\" component={User} />\r\n                </Switch>\r\n            </div>\r\n        </React.Fragment>\r\n    )\r\n}","import * as React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Routing } from './Routing';\r\n\r\nexport function LinksRouter() {\r\n    return (\r\n        <React.Fragment>\r\n            <div>\r\n                <div>\r\n                    <h3>Basic Example of Router with hooks USING useParam , useLocation </h3>\r\n                </div>\r\n                <div className=\"nav\">\r\n                    <li><Link to=\"/\">Home</Link></li>\r\n                    <li><Link to={{ pathname: \"/about\", state: { from: \"root\" } }}>About</Link></li>\r\n                    <li><Link to=\"/user/pedro/delrio\">User</Link></li>\r\n                </div>\r\n                <Routing />\r\n            </div>\r\n        </React.Fragment>\r\n    )\r\n}","import React from 'react';\nimport './App.css';\nimport { HashRouter as Router } from 'react-router-dom';\nimport { Fetch } from './components/Fetch';\nimport { Hooks } from './components/Hooks';\nimport { LinksRouter } from './components/LinksRouter';\n\n\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <LinksRouter />\n          <Hooks />\n          <Fetch />\n        </header>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","\r\ninterface IinitalState {\r\n    counter: number\r\n}\r\nconst initalState = {\r\n    counter: 0\r\n}\r\n\r\nexport function rootReducer(state: IinitalState = initalState, action: any) {\r\n    switch (action.type) {\r\n        case 'INCREMENT': {\r\n            return { ...state, counter: state.counter + 1 }\r\n        }\r\n        case 'DECREMENT': {\r\n            return { ...state, counter: state.counter - 1 }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}","interface IinitalState {\r\n    users: Array<any>\r\n}\r\nconst initalState = {\r\n    users: []\r\n}\r\n\r\nexport function usersReducer(state: IinitalState = initalState, action: any) {\r\n\r\n    switch (action.type) {\r\n        case 'FETCH_USERS': {\r\n            return {\r\n                ...state,\r\n                users: action.users\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}","import { createStore, combineReducers } from 'redux';\r\nimport { rootReducer } from './reducers/rootReducer';\r\nimport { usersReducer } from './reducers/usersReducer';\r\nconst allReducers = combineReducers({ root: rootReducer, users: usersReducer });\r\n\r\nconst store = createStore(allReducers);\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport store from './store/store'\n\n\nReactDOM.render(\n    <Provider store={store}><App /></Provider>\n    , document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}